package swmutsel.model;

import swmutsel.utils.CoreUtils;
import swmutsel.utils.GeneticCode;
import swmutsel.utils.Pair;

/**
 * Steps:
 *
 * 1. Download the mixture file from http://compbio.soe.ucsc.edu/dirichlets/index.html
 *
 * 2. Get the Dirichlet alpha values e.g. grep Alpha= recode3.20comp | cut -d' ' -f3- | pbcopy
 *
 * 3. Use R to calculate the mean equilibrium frequencies for each mixture:
 *
        alphas <- read.csv(pipe('pbpaste'), sep=" ", head=F)
        library(gtools)                              # for rdirichlet
        pdirichlet <- function(x) { y <- rdirichlet(10000, as.vector(unlist(x))); return(apply(y, 2, mean)) }
        frequencies <- t(apply(alphas, 1, pdirichlet))
        for (i in 1:20) {cat('{'); cat(frequencies[i,], sep=','); cat("},\n")}


 * 4. Get the mixture weight grep Mixture= recode3.20comp | cut -d' ' -f2 | tr '\n' ','
 *
 * 5. Get clustering for the classes, for a quick approximation for smaller classes:
        d <- dist(frequencies, method="euclidian")
        hc <- hclust(d, method="ward")
        for (i in 1:20) {group <- cutree(hc, k= i); group <- group - 1; cat('{'); cat(group, sep=','); cat('},\n')}

 *
 * Author: Asif Tamuri (tamuri@ebi.ac.uk)
 * Date: 22/04/2014 12:30
 */
public final class SAMMixures {
    private static final double SMALL = 1.0e-6;

    public final static double[][] RECODE3_20COMP_FREQUENCIES = new double[][]{
            {0.06688476,0.006989919,0.1072935,0.0917178,0.01255155,0.09541003,0.03571465,0.005888472,0.08291374,0.0193117,0.006786744,0.09609419,0.05111329,0.05479168,0.0635048,0.1039544,0.05994584,0.01295614,0.006380215,0.0197966},
            {0.07448896,0.01731129,0.02583028,0.04191052,0.05723708,0.03389155,0.03044095,0.08030528,0.0445982,0.1231028,0.03831091,0.03149692,0.032668,0.03762407,0.05084208,0.05271892,0.06457921,0.09025292,0.0202431,0.05214694},
            {0.02935198,0.0102401,0.001418911,0.002909312,0.08142793,0.004818395,0.003687209,0.1613057,0.00566086,0.4648844,0.08222325,0.003548594,0.006196446,0.005374142,0.004521138,0.005763379,0.01042697,0.09830571,0.00520407,0.01273143},
            {0.08085124,0.001475237,0.06248164,0.1878477,0.00322734,0.01165671,0.01187521,0.02220226,0.1550919,0.03522175,0.01130445,0.03122955,0.02740204,0.09687667,0.09585329,0.05722809,0.06119555,0.04164668,0.0008550553,0.004477623},
            {0.1323513,0.03394172,0.003779433,0.008494623,0.02059353,0.01121223,0.003074091,0.1938272,0.007170937,0.130869,0.02558832,0.005705839,0.01308341,0.004186112,0.006108308,0.01669837,0.06619724,0.3073817,0.001990927,0.007745721},
            {0.03337674,0.005760188,0.01003673,0.02742933,0.007123606,0.02307621,0.03286177,0.01718415,0.2709186,0.04061114,0.01235509,0.03508526,0.01745819,0.06285537,0.3114166,0.02727669,0.02901471,0.01854065,0.003464194,0.01415478},
            {0.05315322,0.002241427,0.2863532,0.3227576,0.005991532,0.02685471,0.01217155,0.008126839,0.04008057,0.01410844,0.00445413,0.0352765,0.03077088,0.05498714,0.01797596,0.03682259,0.02521631,0.01268353,0.002345231,0.007628651},
            {0.05913321,0.0002640055,0.1415496,0.1029276,0.0619165,0.0001000131,0.0001988143,0.01830398,0.06489745,0.07629489,0.02432499,0.07703362,0.000200001,0.04110133,0.1020974,0.06529767,0.05703514,0.04258462,0.0001168787,0.06462239},
            {0.4186601,0.03942822,0.01041934,0.01328436,0.0105368,0.1345627,0.005436345,0.009751792,0.0109102,0.02560845,0.0136883,0.01009563,0.02471537,0.009553885,0.007729158,0.1331786,0.05188395,0.05959895,0.002312903,0.008644948},
            {0.0392293,0.003237822,0.0212217,0.01270351,0.003625121,0.7681812,0.006665778,0.003863303,0.01630038,0.005885296,0.002268668,0.03189666,0.01140803,0.009259992,0.01259438,0.03139365,0.007911911,0.005619345,0.002267844,0.004466074},
            {0.05205873,0.01532398,0.02213843,0.0185372,0.007160478,0.02153594,0.008010369,0.0197144,0.02093116,0.01730569,0.01009272,0.05116558,0.01914179,0.01540713,0.01691814,0.2594174,0.3746836,0.04078612,0.002324648,0.00734651},
            {1.373435e-39,0.003166534,0.001472964,9.819649e-15,0.03293225,0.0007228306,0.001169005,0.3872429,0.003570066,0.1584385,0.02406951,0.0009861877,0.002031219,0.001691557,0.003249441,0.001682613,0.008330211,0.3561436,0.002695373,0.01040516},
            {0.01952349,0.009357336,0.3536917,0.0304074,0.003018897,0.0704827,0.02387966,0.006596365,0.02774382,0.01054114,0.002850443,0.2453482,0.01980911,0.01389937,0.01130523,0.09372176,0.03684098,0.007743735,0.002416544,0.01082215},
            {0.05065518,0.003120385,0.02163421,0.02837913,0.006289376,0.0252388,0.007212269,0.01451558,0.02721749,0.02582359,0.003781301,0.01030119,0.6463112,0.01468945,0.01786423,0.04149099,0.02328552,0.02435867,0.001772923,0.006058512},
            {0.02436751,0.01640297,0.01081669,0.01220354,0.2345821,0.01676781,0.06634913,0.01754489,0.016621,0.04797235,0.01191123,0.02137988,0.00839317,0.008242557,0.01624254,0.02089793,0.01623898,0.02276735,0.05980833,0.3504901},
            {0.02203619,0.007994507,1.967159e-05,0.001352549,0.3703721,0.002459178,1.499961e-53,0.07541552,6.470985e-16,0.174923,0.03384235,8.092909e-07,0.0081808,0.002717183,0.002795201,0.007878408,0.008852215,0.05889579,0.05820651,0.164058},
            {0.05164125,0.01808999,0.01456095,0.1423118,0.02114459,0.01780664,0.08886583,0.005691155,0.05816849,0.07457479,0.04863681,0.03937334,3.762569e-10,0.2166182,0.08855674,0.01734433,0.02335843,0.02534907,0.01658104,0.03132657},
            {0.00689624,0.9373684,0.002321052,0.0007843315,0.001773883,0.003317682,3.81123e-11,0.002172549,0.001418351,0.002023102,0.001679655,0.003272131,0.003859351,0.001707673,0.001835246,0.008375564,0.007229851,0.01228076,0.0005191224,0.001165091},
            {0.009195578,0.001847336,0.003179233,0.005486545,0.07238162,0.009022723,0.006526562,0.007982483,0.005071352,0.03173305,0.005832373,0.004069989,0.003788416,0.002329796,0.01209714,0.008762706,0.007698501,0.008427141,0.7318353,0.0627321},
            {3.622446e-13,1.655912e-18,0.01477042,7.366823e-08,0.01969336,3.312233e-32,0.7534249,0.008472352,7.795932e-22,0.004883738,1.943509e-41,0.06277597,0.0138014,0.03173382,0.01810864,0.0154273,0.008605523,0.006204327,9.83306e-52,0.04209815}
    };


    public final static double[] RECODE3_20COMP_MIXTURE = new double[]{
            0.176513,0.207622,0.0669246,0.0868259,0.0593123,0.0358616,0.03427,0.0428319,0.047875,0.0466614,0.0283695,0.0301127,0.0233828,0.034662,0.0270202,0.0226822,0.00898452,0.00716226,0.00710292,0.00582299
    };

    public final static int[][] RECODE3_20COMP_CLUSTERING = new int[][]{
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0} ,
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0} ,
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 1} ,
            {0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0 , 1 , 0 , 0 , 1 , 1 , 0 , 3 , 2 , 2} ,
            {0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0 , 1 , 0 , 0 , 1 , 1 , 0 , 3 , 4 , 4} ,
            {0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0 , 1 , 0 , 0 , 1 , 1 , 0 , 3 , 4 , 5} ,
            {0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0 , 1 , 0 , 3 , 1 , 1 , 0 , 4 , 5 , 6} ,
            {0, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0 , 1 , 0 , 3 , 4 , 4 , 0 , 5 , 6 , 7} ,
            {0, 0, 1, 0, 1, 0, 0, 0, 2, 3, 2 , 1 , 0 , 4 , 5 , 5 , 0 , 6 , 7 , 8} ,
            {0, 0, 1, 0, 1, 0, 2, 0, 3, 4, 3 , 1 , 2 , 5 , 6 , 6 , 0 , 7 , 8 , 9} ,
            {0, 0, 1, 0, 1, 0, 2, 0, 3, 4, 5 , 1 , 2 , 6 , 7 , 7 , 0 , 8 , 9 , 10},
            {0, 0, 1, 0, 2, 0, 3, 0, 4, 5, 6 , 2 , 3 , 7 , 8 , 8 , 0 , 9 , 10, 11},
            {0, 0, 1, 0, 2, 3, 4, 0, 5, 6, 7 , 2 , 4 , 8 , 9 , 9 , 0 , 10, 11, 12},
            {0, 0, 1, 0, 2, 3, 4, 0, 5, 6, 7 , 2 , 8 , 9 , 10, 10, 0 , 11, 12, 13},
            {0, 0, 1, 0, 2, 3, 4, 0, 5, 6, 7 , 2 , 8 , 9 , 10, 11, 0 , 12, 13, 14},
            {0, 0, 1, 0, 2, 3, 4, 0, 5, 6, 7 , 2 , 8 , 9 , 10, 11, 12, 13, 14, 15},
            {0, 0, 1, 0, 2, 3, 4, 0, 5, 6, 7 , 8 , 9 , 10, 11, 12, 13, 14, 15, 16},
            {0, 1, 2, 0, 3, 4, 5, 0, 6, 7, 8 , 9 , 10, 11, 12, 13, 14, 15, 16, 17},
            {0, 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 , 10, 11, 12, 13, 14, 15, 16, 17, 18},
            {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}
    };

    public static Pair<double[], double[][]> getMixture(int mixtures) {
        // classes are [1,20]
        double[] mixture = new double[mixtures];
        double[][] frequencies = new double[mixtures][GeneticCode.AMINO_ACID_STATES];
        int[] clustering = RECODE3_20COMP_CLUSTERING[mixtures - 1];

        for (int i = 0; i < RECODE3_20COMP_MIXTURE.length; i++) {
            double[] mixtureFrequencies = RECODE3_20COMP_FREQUENCIES[i];
            int category = clustering[i];

            for (int j = 0; j < GeneticCode.AMINO_ACID_STATES; j++) {
                frequencies[category][j] += mixtureFrequencies[j];
            }

            mixture[category] += RECODE3_20COMP_MIXTURE[i];
        }

        // Normalise all frequencies
        for (int i = 0; i < mixtures; i++) {
            double sum = 0;
            for (int j = 0; j < GeneticCode.AMINO_ACID_STATES; j++) {
                if (frequencies[i][j] < SMALL) frequencies[i][j] = SMALL;
                sum += frequencies[i][j];
            }
            for (int j = 0; j < GeneticCode.AMINO_ACID_STATES; j++) {
                frequencies[i][j] /= sum;
            }
        }

        return Pair.of(mixture, frequencies);
    }

    public static void main(String[] args) {
        int mixtures = 3;
        Pair<double[], double[][]> pair = getMixture(mixtures);

        System.out.printf("%s\n", CoreUtils.join("%.7f", " ", pair.first));
        System.out.println();
        for (int i = 0; i < mixtures; i++) {
            System.out.printf("%s\n", CoreUtils.join("%.7f", " ", pair.second[i]));
        }
        System.out.println();
    }

}
